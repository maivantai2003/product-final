@model IEnumerable<QuanLySanPhamBasic.Models.Book>
@using Microsoft.AspNetCore.Http

@{
    ViewData["Title"] = "Book";
}

<style>
	body {
		color: #566787;
		background: #f5f5f5;
		font-family: 'Varela Round', sans-serif;
		font-size: 13px;
	}

	.table-responsive {
		margin: 30px 0;
	}

	.table-wrapper {
		background: #fff;
		padding: 20px 25px;
		border-radius: 3px;
		min-width: 1000px;
		box-shadow: 0 1px 1px rgba(0,0,0,.05);
	}

	.table-title {
		padding-bottom: 15px;
		background: #435d7d;
		color: #fff;
		padding: 16px 30px;
		min-width: 100%;
		margin: -20px -25px 10px;
		border-radius: 3px 3px 0 0;
	}

		.table-title h2 {
			margin: 5px 0 0;
			font-size: 24px;
		}

		.table-title .btn-group {
			float: right;
		}

		.table-title .btn {
			color: #fff;
			float: right;
			font-size: 13px;
			border: none;
			min-width: 50px;
			border-radius: 2px;
			border: none;
			outline: none !important;
			margin-left: 10px;
		}

			.table-title .btn i {
				float: left;
				font-size: 21px;
				margin-right: 5px;
			}

			.table-title .btn span {
				float: left;
				margin-top: 2px;
			}

	table.table tr th, table.table tr td {
		border-color: #e9e9e9;
		padding: 12px 15px;
		vertical-align: middle;
	}

		table.table tr th:first-child {
			width: 60px;
		}

		table.table tr th:last-child {
			width: 100px;
		}

	table.table-striped tbody tr:nth-of-type(odd) {
		background-color: #fcfcfc;
	}

	table.table-striped.table-hover tbody tr:hover {
		background: #f5f5f5;
	}

	table.table th i {
		font-size: 13px;
		margin: 0 5px;
		cursor: pointer;
	}

	table.table td:last-child i {
		opacity: 0.9;
		font-size: 22px;
		margin: 0 5px;
	}

	table.table td a {
		font-weight: bold;
		color: #566787;
		display: inline-block;
		text-decoration: none;
		outline: none !important;
	}

		table.table td a:hover {
			color: #2196F3;
		}

		table.table td a.edit {
			color: #FFC107;
		}

		table.table td a.delete {
			color: #F44336;
		}

	table.table td i {
		font-size: 19px;
	}

	table.table .avatar {
		border-radius: 50%;
		vertical-align: middle;
		margin-right: 10px;
	}

	.pagination {
		float: right;
		margin: 0 0 5px;
	}

		.pagination li a {
			border: none;
			font-size: 13px;
			min-width: 30px;
			min-height: 30px;
			color: #999;
			margin: 0 2px;
			line-height: 30px;
			border-radius: 2px !important;
			text-align: center;
			padding: 0 6px;
		}

			.pagination li a:hover {
				color: #666;
			}

		.pagination li.active a, .pagination li.active a.page-link {
			background: #03A9F4;
		}

			.pagination li.active a:hover {
				background: #0397d6;
			}

		.pagination li.disabled i {
			color: #ccc;
		}

		.pagination li i {
			font-size: 16px;
			padding-top: 6px
		}

	.hint-text {
		float: left;
		margin-top: 10px;
		font-size: 13px;
	}
	/* Custom checkbox */
	.custom-checkbox {
		position: relative;
	}

		.custom-checkbox input[type="checkbox"] {
			opacity: 0;
			position: absolute;
			margin: 5px 0 0 3px;
			z-index: 9;
		}

		.custom-checkbox label:before {
			width: 18px;
			height: 18px;
		}

		.custom-checkbox label:before {
			content: '';
			margin-right: 10px;
			display: inline-block;
			vertical-align: text-top;
			background: white;
			border: 1px solid #bbb;
			border-radius: 2px;
			box-sizing: border-box;
			z-index: 2;
		}

		.custom-checkbox input[type="checkbox"]:checked + label:after {
			content: '';
			position: absolute;
			left: 6px;
			top: 3px;
			width: 6px;
			height: 11px;
			border: solid #000;
			border-width: 0 3px 3px 0;
			transform: inherit;
			z-index: 3;
			transform: rotateZ(45deg);
		}

		.custom-checkbox input[type="checkbox"]:checked + label:before {
			border-color: #03A9F4;
			background: #03A9F4;
		}

		.custom-checkbox input[type="checkbox"]:checked + label:after {
			border-color: #fff;
		}

		.custom-checkbox input[type="checkbox"]:disabled + label:before {
			color: #b8b8b8;
			cursor: auto;
			box-shadow: none;
			background: #ddd;
		}
	/* Modal styles */
	.modal .modal-dialog {
		max-width: 400px;
	}

	.modal .modal-header, .modal .modal-body, .modal .modal-footer {
		padding: 20px 30px;
	}

	.modal .modal-content {
		border-radius: 3px;
		font-size: 14px;
	}

	.modal .modal-footer {
		background: #ecf0f1;
		border-radius: 0 0 3px 3px;
	}

	.modal .modal-title {
		display: inline-block;
	}

	.modal .form-control {
		border-radius: 2px;
		box-shadow: none;
		border-color: #dddddd;
	}

	.modal textarea.form-control {
		resize: vertical;
	}

	.modal .btn {
		border-radius: 2px;
		min-width: 100px;
	}

	.modal form label {
		font-weight: normal;
	}
</style>

<div>
	@*------*@
	@* <div class="row mb-3">
		<form asp-action="Index" method="get" asp-controller="Books" class="row g-2 align-items-end">
			<!-- Tìm kiếm tiêu đề, tác giả, NXB -->
			<div class="col-md-4">
				<input type="text" class="form-control" name="search" placeholder="Tìm kiếm tiêu đề, tác giả, NXB..." value="@Context.Request.Query["search"]" />
			</div>

			<!-- Tìm kiếm theo tác giả -->
			<div class="col-md-2">
				<input type="text" class="form-control" name="author" placeholder="Tác giả" value="@Context.Request.Query["author"]" />
			</div>

			<!-- Tìm kiếm theo nhà xuất bản -->
			<div class="col-md-2">
				<input type="text" class="form-control" name="publisher" placeholder="Nhà xuất bản" value="@Context.Request.Query["publisher"]" />
			</div>

			<!-- Thể loại -->
			<div class="col-md-2">
				<select name="genreId" class="form-select" asp-items="ViewBag.Genres">
					<option value="">-- Thể loại --</option>
				</select>
			</div>

			<!-- Giá từ -->
			<div class="col-md-1">
				<input type="number" class="form-control" name="priceFrom" placeholder="Từ" value="@Context.Request.Query["priceFrom"]" />
			</div>

			<!-- Giá đến -->
			<div class="col-md-1">
				<input type="number" class="form-control" name="priceTo" placeholder="Đến" value="@Context.Request.Query["priceTo"]" />
			</div>

			<!-- Nút Lọc -->
			<div class="col-md-2">
				<button type="submit" class="btn btn-primary w-100">Lọc</button>
			</div>
		</form>
	</div> *@
	@*------*@

	<div class="table-responsive">
		<div class="table-wrapper">
			<div class="table-title">
				<div class="row">
					<div class="col-sm-6">
						<h2>Manage <b>@ViewData["Title"]</b></h2>
					</div>
					<div class="col-sm-6">
						<a asp-action="Create" class="btn btn-success"><i class="material-icons">&#xE147;</i> <span>Add New</span></a>
						<a href="#" class="btn btn-danger" data-toggle="modal"><i class="material-icons">&#xE15C;</i> <span>Delete</span></a>
					</div>
				</div>
			</div>
			<table class="table table-striped table-hover">
				<thead>
					<tr>
						<th>
							<span class="custom-checkbox">
								<input type="checkbox" id="selectAll">
								<label for="selectAll"></label>
							</span>
						</th>
                        <th>
                            @Html.DisplayNameFor(model => model.Title)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Author)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Price)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Available)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Publisher)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.CreatedDate)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Genre)
                        </th>
                        <th>
                            Actions
                        </th>
						<th>
							Cart
						</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Model)
					{
						<tr>
							<td>
								<span class="custom-checkbox">
									<input type="checkbox" id="@item.Id" name="options[]" value="1">
									<label for="@item.Id"></label>
								</span>
							</td>
							<td>@item.Title</td>
							<td>@item.Author</td>
							<td>@item.Price</td>
							<td>@item.Available</td>
							<td>@item.Publisher</td>
							<td>@item.CreatedDate</td>
							<td>@item.Genre?.Name</td>
							<td>
								<a asp-action="Edit" asp-route-id="@item.Id" class="edit"><i class="material-icons" title="Edit">&#xE254;</i></a>
								<a asp-action="Delete" asp-route-id="@item.Id" class="delete"><i class="material-icons" title="Delete">&#xE872;</i></a>
								@* <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-check detail"><i class="material-icons" title="Edit">&#xE254;</i></a> *@
							</td>
							<td>
								<form asp-controller="Cart" asp-action="AddToCart" method="post">
									<input type="hidden" name="bookId" value="@item.Id" />
									<input type="number" name="quantity" value="1" min="1" />
									<button class="w-100" type="submit">Thêm vào giỏ hàng</button>
								</form>
							</td>
						</tr>
					}
				</tbody>
			</table>
			<div class="clearfix">
				<div class="hint-text">
					Showing page <b>@ViewBag.CurrentPage</b> of <b>@ViewBag.TotalPages</b>
				</div>
				<ul class="pagination">
					@if (ViewBag.CurrentPage > 1)

					{
						<li class="page-item">
							<a class="page-link"
							   href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1, search = Context.Request.Query["search"], author = Context.Request.Query["author"], publisher = Context.Request.Query["publisher"], genreId = Context.Request.Query["genreId"], createdDate = Context.Request.Query["createdDate"], priceFrom = Context.Request.Query["priceFrom"], priceTo = Context.Request.Query["priceTo"] })">
								Previous
							</a>
						</li>
					}

					@for (int i = 1; i <= ViewBag.TotalPages; i++)

					{
						<li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
							<a class="page-link"
							   href="@Url.Action("Index", new { page = i, search = Context.Request.Query["search"], author = Context.Request.Query["author"], publisher = Context.Request.Query["publisher"], genreId = Context.Request.Query["genreId"], createdDate = Context.Request.Query["createdDate"], priceFrom = Context.Request.Query["priceFrom"], priceTo = Context.Request.Query["priceTo"] })">
								@i
							</a>
						</li>
					}

					@if (ViewBag.CurrentPage < ViewBag.TotalPages)

					{
						<li class="page-item">
							<a class="page-link"
							   href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1, search = Context.Request.Query["search"], author = Context.Request.Query["author"], publisher = Context.Request.Query["publisher"], genreId = Context.Request.Query["genreId"], createdDate = Context.Request.Query["createdDate"], priceFrom = Context.Request.Query["priceFrom"], priceTo = Context.Request.Query["priceTo"] })">
								Next
							</a>
						</li>
					}
				</ul>
			</div>
		</div>
	</div>
</div>

@section Scripts {
    <script src="~/js/orderAlert.js"></script>
    <script>
        // Check for order success message in TempData
        @if (TempData["ShowAlert"] != null && TempData["OrderSuccess"] != null)
        {
            <text>
            // Use session storage to persist the message across redirects
            sessionStorage.setItem('orderSuccessMessage', '@TempData["OrderSuccess"]');
            // Display the alert immediately
            showOrderSuccessAlert('@TempData["OrderSuccess"]');
            </text>
        }
        
        // Check for order success message in session
        @if (Context.Session.GetString("OrderSuccessMessage") != null)
        {
            <text>
            sessionStorage.setItem('orderSuccessMessage', '@Context.Session.GetString("OrderSuccessMessage")');
            // Display the alert immediately
            showOrderSuccessAlert('@Context.Session.GetString("OrderSuccessMessage")');
            @{
                // Clear the session variable after reading it
                Context.Session.Remove("OrderSuccessMessage");
            }
            </text>
        }
    </script>
}
