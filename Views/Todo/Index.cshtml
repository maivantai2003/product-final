@model IEnumerable<TodoItem>
@{
    ViewData["Title"] = "To Do List";
}

<div class="todo-container">
    <div class="todo-card">
        <div class="todo-header">
            <div class="date-time">
                <span id="current-date"></span>
                <span id="current-time"></span>
            </div>
            <h1><span class="accent-line"></span>To Do List</h1>
        </div>

        <div class="todo-controls">
            <input type="text" id="search-input" placeholder="Search tasks..." oninput="filterTasks()" />
            <select id="order-select" onchange="filterTasks()">
                <option value="all">All</option>
                <option value="pending">Pending</option>
                <option value="completed">Completed</option>
            </select>
        </div>

        <div class="todo-input">
            <form asp-action="Add" asp-controller="Todo" method="post">
                <input type="text" name="description" placeholder="Add Your Task Here" required />
                <button type="submit">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="12" y1="5" x2="12" y2="19"></line>
                        <line x1="5" y1="12" x2="19" y2="12"></line>
                    </svg>
                </button>
            </form>
        </div>

        <div class="todo-list">
            @* <label>@Html.DisplayNameFor(model => model.IsDone)</label> *@
            @if (Model.Count() == 0)
            {
               <div class="todo-item">
                   No todos.
               </div>
            } 
            @foreach (var task in Model)
            {
                <div class="todo-item @(task.IsDone ? "success" : "")" id="todo-@task.Id" data-status="@(task.IsDone ? "completed" : "pending")">
                    <span class="task-text">@task.Description</span>
                    <div class="task-actions">
                        <button class="action-btn check-btn" title="Complete" onclick="CheckDone(@task.Id)">✓</button>
                        <button class="action-btn edit-btn" title="Edit" onclick="EditView(@task.Id)">✎</button>
                        <button class="action-btn delete-btn" title="Delete" onclick="Delete(@task.Id)">×</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .todo-container {
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #f0f5ff;
        padding: 20px;
    }

    .todo-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
        width: 100%;
        max-width: 400px;
    }

    .todo-header {
        margin-bottom: 20px;
    }

    .date-time {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 8px;
    }

    h1 {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .accent-line {
        width: 3px;
        height: 24px;
        background-color: #ff4444;
        display: inline-block;
    }

    .todo-controls {
        display: flex;
        justify-content: space-between;
        gap: 10px;
        margin-bottom: 10px;
    }

    #search-input, #order-select {
        flex: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
    }

    .todo-input form {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .todo-input input {
        flex: 1;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
    }

    .todo-input button {
        background: #ff4444;
        color: white;
        border: none;
        border-radius: 6px;
        width: 40px;
        height: 40px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .todo-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        border: 1px solid #eee;
        border-radius: 6px;
        margin-bottom: 8px;
    }

    .todo-item.success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        text-decoration: line-through;
        opacity: 0.7;
    }

    .task-actions {
        display: flex;
        gap: 8px;
        opacity: 0;
        transition: opacity 0.2s;
    }

    .todo-item:hover .task-actions {
        opacity: 1;
    }

    .action-btn {
        background: none;
        border: none;
        cursor: pointer;
        color: #666;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
    }

    .action-btn:hover {
        background: #f5f5f5;
    }
</style>

@section Scripts {
    <script>
        function updateDateTime() {
            const now = new Date();
            const dateOptions = { weekday: 'short', month: 'short', day: '2-digit', year: 'numeric' };
            const timeOptions = { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false };

            document.getElementById('current-date').textContent = now.toLocaleDateString('en-US', dateOptions);
            document.getElementById('current-time').textContent = now.toLocaleTimeString('en-US', timeOptions);
        }

        updateDateTime();
        setInterval(updateDateTime, 1000);

        function EditView(id) {
            console.log("In Edit View")
            window.location.href = '/edit-view/' + id;
        }

        async function Delete(id) {
            if (!confirm("Are you sure you want to delete this task?")) return;

            try {
                const response = await fetch(`/delete/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    alert("Failed to delete task.");
                }
            } catch (error) {
                console.error("Error deleting task:", error);
                alert("An error occurred while deleting the task.");
            }
        }

        async function CheckDone(id) {
            try {
                let taskElement = document.getElementById(`todo-${id}`);
                let newStatus = taskElement.getAttribute("data-status") === "pending" ? "completed" : "pending";

                taskElement.setAttribute("data-status", newStatus);
                taskElement.classList.toggle("success");

                const response = await fetch(`/check-done/${id}`, {
                    method: 'POST'
                });

                if (response.ok) {
                    const todoItem = document.getElementById(`todo-${id}`);
                    if (todoItem) {
                       filterTasks();
                    }
                } else {
                    alert("Failed to check done task.");
                }
            } catch (error) {
                console.error("Error check done task:", error);
                alert("An error occurred while check done the task.");
            }
        }

        function filterTasks() {
            let searchValue = document.getElementById("search-input").value.toLowerCase();
            let orderValue = document.getElementById("order-select").value;
            let tasks = document.querySelectorAll(".todo-item");

            tasks.forEach(task => {
                let taskText = task.querySelector(".task-text").textContent.toLowerCase();
                let taskStatus = task.getAttribute("data-status");
                let isVisible = taskText.includes(searchValue) && (orderValue === "all" || orderValue === taskStatus);
                task.style.display = isVisible ? "flex" : "none";
            });
        }
    </script>
}